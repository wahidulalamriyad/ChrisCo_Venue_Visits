# -*- coding: utf-8 -*-
"""Wahidul Alam Riyad-ChrisCo Venue Visits.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/wahidulalamriyad/ChrisCo_Venue_Visits/blob/main/Wahidul_Alam_Riyad_ChrisCo_Venue_Visits.ipynb

#**Data Exploration for ChrisCo**

###ChrisCo is a fictitious yet highly successful firm that manages several locations around the United Kingdom. ChrisCo gathers a great deal of information about individual customers who visit its venues via its loyalty card programme. However, this information has been aggregated/averaged to provide information about the company's 40 locations, each designated by a unique three-letter number.

---

### **1.   To use interaction plots, it is necessary to use holoviews and hvplot.**
"""

!pip install holoviews hvplot

"""### **2.   To perform visualisation, several libraries needs to be imported.**


"""

# Import `matplotlib` under the alias `plt`
import matplotlib.pyplot as plt

# Import `numpy` under the alias `np`
import numpy as np

# Import `seaborn` under the alias `sns`
import seaborn as sns

# Import `pandas` under the alias `pd`
import pandas as pd

# Import `holo views`
import holoviews as hv
import hvplot.pandas

# Listing the daily number of customer visits to the company's 40 venues
data = pd.read_csv('https://tinyurl.com/ChrisCoDV/001188274/VenueDailyVisitors.csv', index_col=0)
data.index = pd.to_datetime(data.index)

"""### **3.   Quick look on the data.**


"""

print(data)
print(data.head())
print(data.tail())
print(data.describe())
print(data.sum())

data = data.reindex(data.sum().sort_values(ascending=False).index, axis=1)

print(data.sum())
print(data.head())

"""### **4.   The following line plot shows the periodic changes and trends between the High Volume Venues.**


"""

selected = ['RDA', 'SJU', 'SPF', 'PXI']

print(data[selected].head())

data[selected].plot.line()
plt.show()

"""### **5.   The following graph shows the 7-day Rolling Average for High Volume Venue Visits.**

It consists of four independent stores with a rolling average of client visits of seven days. Because we are working with vast amounts of data, we use a rolling average to minimise the build-up of different line plots of data and make the line plot more obvious. The y-axis indicates the number of visits, and the x-axis represents the time series in this line graph, which shows the frequency of client visits throughout that year. 

We can see that the Venue RDA, SJU, SPF and PXI are the high-volume venue visits with a 7-day rolling average. Venue RDA, SPF and PXI show fluctuations in customers over the year. However, Venue SJU remains constant with minimum customer fluctuations over the year. Overall, Venue RDA has the highest customer visits compared to other Venues.
"""

period = 7
rolling_average = data.rolling(window=period).sum()

selected = ['RDA', 'SJU', 'SPF', 'PXI']
print(data[selected].head())

plt.figure(figsize=(8, 8))
plt.plot(data[selected], linewidth=0.5)
plt.gca().set_prop_cycle(None)
plt.plot(rolling_average[selected], linewidth=2)
#plt.ylim(ymin=0)
plt.xlabel('Venue', fontsize=16)
plt.ylabel('Units Visits', fontsize=16)
plt.title('High Volume Venue Visits with 7-day Rolling Average', fontsize=18)
plt.legend(selected, loc=2)
plt.show()

data = data.reindex(data.sum().sort_values(ascending=False).index, axis=1)

print(data.sum())
print(data.head(15))

"""### **6.   The following graph shows the bar chart of High, Medium and Low Volume Venue Visits.**

A bar chart better represents the overall value of a variable. When working with significant amounts of data, this is incredibly handy. It quickly exposes the weight of several variables, allowing us to choose which variable is the most important by simply examining the bars. High-volume venue visits, medium-volume, and low volume venue visits are shown in the figure.

We can see that RDA, SJU, SPF, and PXI are the four high-volume venues. These locations are within walking distance of one another and have had over 150,000 visitors. There are eight visits to venues with a medium volume. Close bars are present in the letters 'PDT', 'QRY', and 'QJL'. In contrast, close bars are present in the letters 'CWN', 'BEY', 'CQC', 'DKS', and 'AWF.' The lowest volume venue visit has three bar segments, with the final seven 'ZJB', 'BQV', 'BKI', 'ZPL', 'YDI', 'YVW', and 'AEQ' venues being new venues that debuted this year.
"""

categories = ['High', 'Medium', 'Low']
categories_selected = [[] for i in range(len(categories))]
for name in data.columns:
    total_Hits = data[name].sum()
    if total_Hits > 150000:
        category = 0
    elif total_Hits > 50000:
        category = 1
    else:
        category = 2
    categories_selected[category].append(name)
    #print('Pages ' + name + ' is ' + categories[category] + ' volume')

for i in range(len(categories)):
    print(categories[i] + ': ' + str(categories_selected[i]))

for i, selected in enumerate(categories_selected):
    plt.figure(figsize=(8, 8))
    x_pos = np.arange(len(data[selected].columns))
    plt.bar(x_pos, data[selected].sum(), align='center')
    plt.xticks(x_pos, data[selected].columns)
    plt.xlabel('Venue', fontsize=16)
    plt.ylabel('Visits', fontsize=16)
    plt.title(categories[i] + ' Volume Venue Visits', fontsize=18)
    plt.show()

selected = ['RDA', 'SJU', 'SPF', 'PXI']

counter = 1
fig = plt.figure(figsize=(8, 8))
fig.suptitle('Venue Visit Correlations', fontsize=18, y = 1.05)
for i, name_i in enumerate(selected):
    for j in range(i + 1, len(selected)):
        name_j = selected[j]
        sub = fig.add_subplot(3, 3, counter)
        sub.set_title(name_i + ' vs ' + name_j, fontsize=10)
        sub.scatter(data[name_i], data[name_j], s=0.5)
        counter += 1

plt.subplots_adjust(wspace=0.5, hspace=0.5)
plt.tight_layout()
plt.show()

selected = ['RDA', 'SJU', 'SPF', 'PXI']
selected = data.columns[data.sum() > 150000]

print(data[selected].head())

plt.figure(figsize=(10, 10))
corr = data[selected].corr()
ax = sns.heatmap(corr, vmin=-1, vmax=1, center=0, cmap=sns.diverging_palette(220, 20, n=200), square=True, annot=True,
                 annot_kws={"size": 8})
ax.set_xticklabels(ax.get_xticklabels(), rotation=45, horizontalalignment='right')
plt.show()

"""### **7.   The following chart shows the scatter plot of Venue Visits Correlation between High and Medium Venue.**

Finding the correlation between two variables is the goal of a scatter plot. It allows us to see how closely two thoughts are connected or what influence one has on the other. But, more importantly, if we can forecast the link between these two factors, we will be in an excellent position to look forward and predict future behaviour. This figure shows a scatter plot of the correlation of different venue visits.

We can see the correlation between high and medium venue visits. The closer the dots on a line, the stronger the correlation, whether positive or negative. However, it does not give a perfect view of the correlation. There is a strong positive correlation between 'RDA', 'SJU', 'PDT', 'QRY', 'CWN', 'BEY', 'CQC', and 'DKS'.
"""

selected = ['RDA', 'SJU', 'SPF', 'PXI', 'PDT', 'QRY', 'QJL', 'CWN', 'BEY', 'CQC', 'DKS', 'AWF']

counter = 1
fig = plt.figure(figsize=(12, 8))
fig.suptitle('Venue Visit Correlations', fontsize=18, y = 1.05)
for i, name_i in enumerate(selected):
    for j in range(i + 1, len(selected)):
        name_j = selected[j]
        sub = fig.add_subplot(9, 9, counter)
        sub.set_title(name_i + ' vs ' + name_j, fontsize=8)
        sub.scatter(data[name_i], data[name_j], s=0.5)
        counter += 1
plt.subplots_adjust(wspace=0.6, hspace=1.5)
plt.tight_layout()
plt.show()

"""### **8.   The following figure shows the heatmap of Correlation between High and Medium Volume Venues.**

Heatmaps enable data analysis considerably faster and easier than studying data recorded in excel with infinite rows and columns by providing a visual depiction of numerical data in a ready-to-consume format. Overarching comparisons that would otherwise need data analysis and sorting days perform with a single glance at the resulting heatmap. The figure shows the heatmap of correlation between high volume and medium volume venues.

Heatmaps provide a more accurate picture of variable relationships, unlike scattering plot graphs. Using a heatmap, we can observe more correlations and the strength of correlation between variables, which we could not notice using a scatter plot. The venues DKS and AWF, CQC and DKS, BEY and CQC, QWN and BEY, and others are substantially positive connected in the chart above. As a result, we will only create a new scatter plot to indicate positive correlations with a Pearson coefficient more significant than 0.8.
"""

selected = ['RDA', 'SJU', 'SPF', 'PXI'] + ['PDT', 'QRY', 'QJL', 'CWN', 'BEY', 'CQC', 'DKS', 'AWF']
selected = data.columns[data.sum() > 50000]

print(data[selected].head())

plt.figure(figsize=(8, 8))
corr = data[selected].corr()
ax = sns.heatmap(corr, vmin=-1, vmax=1, center=0, cmap=sns.diverging_palette(220, 20, n=200), square=True, annot=True,
                 annot_kws={"size": 8})
ax.set_xticklabels(ax.get_xticklabels(), rotation=45, horizontalalignment='right')
ax.set_yticklabels(ax.get_yticklabels(), rotation=45, horizontalalignment='right')
plt.show()

"""### **9.   The following figure shows the Pearson Coefficient scatter plot of Positive Correlation Venues.**

Finding the correlation between two variables is the goal of a scatter plot. It allows us to see how closely two thoughts are connected or what influence one has on the other. But, more importantly, if we can forecast the link between these two factors, we will be in an excellent position to look forward and predict future behaviour. The figure shows a scatter plot of the correlation of different venue visits.

The figure illustrates a positive connection with a Pearson Coefficient greater than 0.8. The scatter plot includes the following venues: RDA, SJU, PDT, QRY, CWN, BEY, CQC, and DKS. RDA and QRY, as well as PDT and CWN, have a good relationship. On the other hand, other venues do not seem to have a significant association.
"""

selected = ['RDA', 'SJU', 'PDT', 'QRY', 'CWN', 'BEY', 'CQC', 'DKS']

counter = 1
fig = plt.figure(figsize=(9, 9))
fig.suptitle('Venue Visits Correlations', fontsize=18, y = 1.05)
for i, name_i in enumerate(selected):
    for j in range(i + 1, len(selected)):
        name_j = selected[j]
        sub = fig.add_subplot(6, 6, counter)
        sub.set_title(name_i + ' vs ' + name_j, fontsize=9)
        sub.scatter(data[name_i], data[name_j], s=1)
        counter += 1
plt.subplots_adjust(wspace=0.6, hspace=0.6)
plt.tight_layout()
plt.show()

selected = ['RDA', 'SJU', 'SPF', 'PXI'] + ['PDT', 'QRY', 'QJL', 'CWN', 'BEY', 'CQC', 'DKS', 'AWF']
counter = 1
fig = plt.figure(figsize=(8, 8))
fig.suptitle('Venue Hits', fontsize=18, y=1.05)
for name in selected:
    sub = fig.add_subplot(3, 4, counter)
    sub.set_title('Venue ' + name, fontsize=10)
    sub.plot(data.index, data[name], linewidth=0.5)
    sub.axes.get_xaxis().set_ticks([])
    counter += 1
plt.subplots_adjust(wspace=0.4, hspace=0.4)
plt.tight_layout()
plt.show()

"""### **10.   The following figure shows the seasonality graph of High and Medium Volume Venue Visits.**

Seasonality refers to the recurrence of data throughout time. Another critical feature of time series analysis is its ability to detect patterns in data. After eliminating the trend from the data, it is usually quantified by autocorrelation. The graph of weekly seasonality of high and medium volume venue visits is shown in this figure.

The spikes that rise over the dashed lines are the subject of this illustration. Autocorrelation is evidenced when such tips are statistically significant. Notably, eight of the twelve locations have a weekly distribution, with a peak every seven days. Weekends and holidays, for example, might contribute to such seasonality. Furthermore, this implies that the venue's visitor figures are linked. To explain further, when the number of visitors increases, so do the lines on the graphs, and vice versa.
"""

selected = ['RDA', 'SJU', 'SPF', 'PXI'] + ['PDT', 'QRY', 'QJL', 'CWN', 'BEY', 'CQC', 'DKS', 'AWF']

for name in selected:
    pd.plotting.autocorrelation_plot(data[name])
    plt.title('Venue ' + name)
    plt.show()

selected = ['RDA', 'SJU', 'SPF', 'PXI'] + ['PDT', 'QRY', 'QJL', 'CWN', 'BEY', 'CQC', 'DKS', 'AWF']

for name in selected:
    pd.plotting.autocorrelation_plot(data[name])
    plt.xlim([0, 50])
    plt.title('Venue ' + name)
    plt.show()

"""### **11.   Here I am compiling the data into two dataframes: one containing daily visitor data (one row for each date); the other containing summary data (one row for each venue).**

"""

data = pd.read_csv('https://tinyurl.com/ChrisCoDV/001188274/VenueDailyVisitors.csv',index_col=0)

VenueAge = pd.read_csv('https://tinyurl.com/ChrisCoDV/001188274/VenueAge.csv', index_col=0)
VenueDistance = pd.read_csv('https://tinyurl.com/ChrisCoDV/001188274/VenueDistance.csv', index_col=0)
VenueDuration = pd.read_csv('https://tinyurl.com/ChrisCoDV/001188274/VenueDuration.csv', index_col=0)
VenueGender = pd.read_csv('https://tinyurl.com/ChrisCoDV/001188274/VenueGender.csv', index_col=0)
VenueSpend = pd.read_csv('https://tinyurl.com/ChrisCoDV/001188274/VenueSpend.csv', index_col=0)

summary_data = pd.DataFrame(index=data.columns)
summary_data['VenueAge'] = VenueAge.values
summary_data['VenueDistance'] = VenueDistance.values
summary_data['VenueDailyVisitors'] = data.sum().values
summary_data['VenueDuration'] = VenueDuration.values
summary_data['VenueGender'] = VenueGender.values
summary_data['VenueSpend'] = VenueSpend.values

print(summary_data.head())
print(summary_data.describe())

sns.pairplot(summary_data, height=1.5, plot_kws={'s': 20})
plt.show()

plt.figure(figsize=(8, 8))
corr = summary_data.corr()
ax = sns.heatmap(corr, vmin=-1, vmax=1, center=0, cmap=sns.diverging_palette(220, 20, n=200), square=True, annot=True,
                 annot_kws={"size": 8})
ax.set_xticklabels(ax.get_xticklabels(), rotation=45, horizontalalignment='right')
ax.set_yticklabels(ax.get_yticklabels(), rotation=45, horizontalalignment='right')
plt.show()

"""### **12.   The following figure shows the Interactive line plot of High-Volume Venue.**

The figure represents the interactive line plot visualisation of a high-volume venue. When users choose points or series in a chart, this enables us to create simple-looking visualisations that are rather detailed and a tool for users to explore our data to their heart's content. We may zoom in on a particularly intriguing variation and rapidly add more variables to describe the pattern we've discovered using interactive data visualisation. Furthermore, interactive visualisation will aid us in identifying findings that are not consistent with the theory.

Panning, box zoom, wheel zoom, save, reset, and hover are among the interactive capabilities shown in this figure. As seen in the graph, RDA has the most outstanding total score among the four locations. PXI, on the other hand, gets the most significant number of visits on certain days. The hover is used to determine which day it is. This indicates that PXI increased to 782 on November 13th, 2019. Even though PXI is the lowest, there was a day when it fell below its average. Use the hover to see which day it is. PXI plummeted to 174 on August 10th, 2019.
"""

selected = ['RDA', 'SJU', 'SPF', 'PXI']

plot = data[selected].hvplot.line(
    frame_height=400, frame_width=400,
    xlabel='Date', ylabel='Visits',
    title='High Volume Venue'
)
hv.extension('bokeh')
plot

"""### **13.   The following figure shows the Interactive heatmap of All Venue Visits.**

The figure represents the interactive heatmap visualisation of all venue visits. When users choose points or series in a chart, this enables us to create simple-looking visualisations that are rather detailed and a tool for users to explore our data to their heart's content. We may zoom in on a particularly intriguing variation and rapidly add more variables to describe the pattern we've discovered using interactive data visualisation. Furthermore, interactive visualisation will aid us in identifying findings that are not consistent with the theory.

Panning, box zoom, wheel zoom, save, reset, and hover are among the interactive capabilities shown in this figure. Use the box zoom and approach to view the most robust correlations and values. This indicates a strong correlation between QRY vs SJU with a value of 0.9. There is also a strong correlation between BEY vs PDT, with a value of 0.79. Use the reset to return to its normal state.
"""

plot = data.corr().hvplot.heatmap(
    frame_height=400, frame_width=400,
    title='Venue Correlations',
    rot=90, cmap='coolwarm' 
).opts(invert_yaxis=True, clim=(-1, 1))
hv.extension('bokeh')
plot

"""### **14.   Conclusion**

In the end, the business concentrates on high and medium volume venues. Thus, this study presents significant findings and trends in those venues. The last seven 'ZJB', 'BQV', 'BKI', 'ZPL', 'YDI', 'YVW', and 'AEQ' venues are new venues that opened this year, with the lowest volume of venue visits having three-bar segments. There were no negative relationships between the characteristics provided. RDA has the highest median out of all four when it comes to high-volume venues. Furthermore, eight of the twelve exhibits weekly seasonality.
"""